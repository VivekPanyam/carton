# This is copied directly from the spec

# A number defining the carton spec version. This is currently 1
spec_version = 1

# Optional, but highly recommended
# The name of the model
model_name = "super_awesome_test_model"

# Optional
model_description = """
Some description of the model that can be as detailed as you want it to be

This can span multiple lines. It can use markdown, but shouldn't use arbitrary HTML
(which will usually be treated as text instead of HTML when this is rendered)

You can use images and links, but the paths must either be complete https
URLs (e.g. https://example.com/image.png) or must reference a file in the misc folder (e.g `@misc/file.png`).
See the misc section of this document for more details
"""

# Optional
# A list of platforms the model supports. If empty or unspecified, all platforms are okay.
# The contents of this list are target triples. For example:
# x86_64-unknown-linux-gnu
# aarch64-unknown-linux-gnu
# x86_64-apple-darwin
# aarch64-apple-darwin
required_platforms = []

# Specifying inputs and outputs is optional, but highly recommended to make
# it easy to use your model.
# If you specify one input or output, you must specify all inputs and outputs
# Note that the input and output structures have an ordering (they're arrays of toml tables)
# https://toml.io/en/v1.0.0#array-of-tables
# This ordering is used if the code running the model does not specify tensor names when running
# inference.
[[input]]
# A string
name = "x"

# The dtype. Valid values are
# - float32
# - float64
# - string
# - int8
# - int16
# - int32
# - int64
# - uint8
# - uint16
# - uint32
# - uint64
dtype = "float32"

# Shape is either:
# - a symbol (an arbitrary string that must resolve to the same value wherever it's
#   used across all inputs and outputs). "*" is a reserved symbol name. It can have
#   a different value anytime it's used. See below for examples.
# - The string "*", meaning any shape is allowed
# - An empty list, meaning the value is a scalar
# - A list with one entry per dimension. Each entry can be a symbol or an integer
shape = ["batch_size", 3, 512, 512]

# For example, a tensor with 3 dims of any value
# Note: this also supports ragged tensors / nested tensors
# shape = ["*", "*", "*"]

# Other examples
# Any number of dims are allowed:
#   shape = "*"
# A scalar:
#   shape = []
# A symbol for the overall shape:
#   shape = "input_shape"

# Optional description of the input
description = "Something"

# Optional
# All inputs and outputs can have an "internal name" as well
# For example, this might be used to remap a user-visible name to a node
# in a TF or PyTorch graph. Carton doesn't expose these names to callers, but
# runners can use them
internal_name = "some_namespace/in_x:0"

# Another input
[[input]]
name = "y"
dtype = "float32"
shape = ["batch_size", 10]

# Same structure as inputs
[[output]]
name = "out"
shape = ["batch_size", 128]
dtype = "float32"

# Optional
# You can provide test data as well to enable basic self-tests
# These reference tensors stored in the `tensor_data` folder
# Usually this section is not handwritten
# `inputs` and `outputs` must be specified above in order to specify test data
[[self_test]]
# Optional
name = ""

# Optional
description = ""

# Required if this section is specified
inputs = { x = "@tensor_data/self_test_tensor_0", y = "@tensor_data/sometensor"}

# Optional
# If this is specified, the output will be compared using
# something conceptually similar to np.allclose
expected_out = { out = "@tensor_data/another_tensor"}

# Optional
# Finally, you can also provide example inputs and outputs
# `inputs` and `outputs` must be specified above in order to specify this section
# These examples don't need to be runnable and can reference images, audio, etc (in
# `misc` folder)
[[example]]
# Optional
name = ""

# Optional
description = ""

# These can reference things in the `tensor_data` or `misc`
inputs = { x = "@misc/input.png", y = "@tensor_data/something" }

sample_out = { out = "@misc/..." }

[runner]
# A string with the name of the runner required to run this model
runner_name = "torchscript"

# A version specifier of the allowed framework versions. In most cases, this should be exactly one version
# These should be semver version requirements parsable by https://docs.rs/semver/1.0.16/semver/struct.VersionReq.html
required_framework_version = "=1.12.1"

# This is basically a version for the contents of the `model` folder
# Generally not user visible
runner_compat_version = 2

# Optional
# Nothing here must be required to run the model
# Runners are required to be able to correctly run the model even if this section is removed
# These options are handled by the runner (the "torchscript" runner in this case) and are different
# for every runner
# These can be overridden at runtime.
# Runners should warn if they are passed options they don't understand (not just silently ignore them)
[runner.opts]
# For example, if we want to set threading configuration for running this model, we may set
# https://pytorch.org/docs/stable/notes/cpu_threading_torchscript_inference.html#runtime-api
num_interop_threads = 4
num_threads = 1